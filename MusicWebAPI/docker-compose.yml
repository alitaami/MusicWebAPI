version: '3.8'

services:
  postgres:
    image: postgres:16-alpine  # Lightweight official PostgreSQL image
    container_name: postgres_container 
    restart: on-failure
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - musicnet
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      retries: 5
    env_file:
      - .env

  elasticsearch:
    image:  bitnami/elasticsearch:7.17.13  # Stable older version
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false  # Disables security for easy access
    ports:
      - "${ELASTICSEARCH_PORT}:9200"
    networks:
      - musicnet
    # volumes:
      # - ./elasticsearch_data:/bitnami/elasticsearch/data  # Correct Bitnami path
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -s ${ELASTICSEARCH_URL}/_cluster/health || exit 1"]
      interval: 10s
      retries: 5
    # entrypoint: >
    #   /bin/bash -c "
    #     # Start Elasticsearch
    #     /opt/bitnami/scripts/elasticsearch/run.sh & 
    #     until curl -s ${ELASTICSEARCH_URL}; do sleep 1; done;
    #     curl -X PUT '${ELASTICSEARCH_URL}/musicwebapi-logs-2025.03.14';
    #     curl -X PUT '${ELASTICSEARCH_URL}/musicwebapi-logs-2025.03.14/_mapping' -H 'Content-Type: application/json' -d '{ 
    #       \"properties\": { 
    #         \"@timestamp\": { \"type\": \"date\" } 
    #       } 
    #     }';
    #     wait
    #   "
    env_file:
      - .env

  kibana:
    image: bitnami/kibana:7.17.13  # Stable Kibana version
    container_name: kibana
    environment:
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL}
    ports:
      - "${KIBANA_PORT}:5601"
    networks:
      - musicnet
    volumes:
      - kibana_data:/usr/share/kibana/data
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -s ${ELASTICSEARCH_URL} > /dev/null || exit 1"]
      interval: 10s
      retries: 5
    restart: on-failure
    env_file:
      - .env

  api:
    build:
      context: ..
      dockerfile: MusicWebAPI/Dockerfile
    container_name: musicwebapi_container
    restart: on-failure
    ports:
      - "${API_PORT}:8080"
    networks:
      - musicnet
    depends_on:
      # minio-init:
        # condition: service_completed_successfully
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "${API_URL}/health"]
      interval: 10s
      retries: 5
    env_file:
      - .env
       
  api2:
    build:
      context: ..
      dockerfile: MusicWebAPI/Dockerfile
    container_name: musicwebapi_container2
    networks:
      - musicnet
    restart: on-failure
    ports:
      - "${API_PORT2}:8080"
    env_file:
      - .env
       
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
     - ${MINIO_PORT} 
    environment:
     MINIO_ROOT_USER: ${MINIO_ROOT_USER}
     MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD} 
     FILE_SERVER_DOWNLOAD_URL: ${FILE_SERVER_DOWNLOAD_URL}
     MINIO_MUSIC_BUCKET_NAME: ${MINIO_MUSIC_BUCKET_NAME}
     MINIO_IMAGES_BUCKET_NAME: ${MINIO_IMAGES_BUCKET_NAME}
    restart: on-failure
    command: server /data
    volumes:
      - minio_data:/data
    env_file: .env
    networks:
      - musicnet
  
  minio-init:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
        sleep 5 &&
        mc alias set local http://minio:9000 $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD} &&
        mc mb local/$${MINIO_MUSIC_BUCKET_NAME} &&
        mc anonymous set download local/$${MINIO_MUSIC_BUCKET_NAME} &&
        echo '✅ Public access granted to music-files bucket' &&
  
        mc mb local/$${MINIO_IMAGES_BUCKET_NAME} &&
        mc anonymous set download local/$${MINIO_IMAGES_BUCKET_NAME} &&
        echo '✅ Public access granted to image-files bucket'
      "
    env_file: .env
    networks:
      - musicnet
  
  
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: on-failure
    ports:
      - "${PORTAINER_PORT}:9300"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - musicnet
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:${PORTAINER_PORT}/api/status"]
      interval: 10s
      retries: 5
    env_file:
      - .env

  redis:
    image: redis:7.2-alpine
    container_name: redis
    restart: on-failure
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - musicnet
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"] 
    environment:
      REDIS_CONNECTION_STRING: ${REDIS_CONNECTION_STRING}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      retries: 5
    env_file:
      - .env


volumes:
  postgres_data:
    driver: local
  elasticsearch_data:
    driver: local
  kibana_data:
    driver: local
  data_protection_keys:
    driver: local
  portainer_data:
    driver: local
  minio_data:
    driver: local
  redis_data:
    driver: local

networks:
  musicnet:
    driver: bridge
