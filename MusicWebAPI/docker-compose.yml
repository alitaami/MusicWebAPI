version: '3.8'

services:
  postgres:
    image: postgres:16-alpine  # Lightweight official PostgreSQL image
    container_name: postgres_container 
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - musicnet
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      retries: 5

  elasticsearch:
    image:  bitnami/elasticsearch:7.17.13  # Stable older version
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false  # Disables security for easy access
    ports:
      - "${ELASTICSEARCH_PORT}:9200"
    networks:
      - musicnet
    # volumes:
      # - ./elasticsearch_data:/bitnami/elasticsearch/data  # Correct Bitnami path
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -s ${ELASTICSEARCH_URL}/_cluster/health || exit 1"]
      interval: 10s
      retries: 5
    # entrypoint: >
    #   /bin/bash -c "
    #     # Start Elasticsearch
    #     /opt/bitnami/scripts/elasticsearch/run.sh & 
    #     until curl -s ${ELASTICSEARCH_URL}; do sleep 1; done;
    #     curl -X PUT '${ELASTICSEARCH_URL}/musicwebapi-logs-2025.03.14';
    #     curl -X PUT '${ELASTICSEARCH_URL}/musicwebapi-logs-2025.03.14/_mapping' -H 'Content-Type: application/json' -d '{ 
    #       \"properties\": { 
    #         \"@timestamp\": { \"type\": \"date\" } 
    #       } 
    #     }';
    #     wait
    #   "

  kibana:
    image: bitnami/kibana:7.17.13  # Stable Kibana version
    container_name: kibana
    environment:
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL}
    ports:
      - "${KIBANA_PORT}:5601"
    networks:
      - musicnet
    volumes:
      - kibana_data:/usr/share/kibana/data
    depends_on:
      - elasticsearch
    restart: always

  api:
    build:
      context: ..
      dockerfile: MusicWebAPI/Dockerfile
    container_name: musicwebapi_container
    ports:
      - "${API_PORT}:8080"
    networks:
      - musicnet
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ConnectionStrings__MusicDbConnection=${ConnectionStrings__MusicDbConnection}
      - JwtSettings__SecretKey=${JwtSettings__SecretKey}
      - JwtSettings__Issuer=${JwtSettings__Issuer}
      - JwtSettings__Audience=${JwtSettings__Audience}
      - LOG_FILE_PATH=${LOG_FILE_PATH} 
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL}  
      - INDEX_FORMAT=${INDEX_FORMAT}  
      - API_URL=${API_URL} 
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "${API_URL}/health"]
      interval: 10s
      retries: 5

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: always
    ports:
      - "${PORTAINER_PORT}:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - musicnet

volumes:
  postgres_data:
    driver: local
  elasticsearch_data:
    driver: local
  kibana_data:
    driver: local
  data_protection_keys:
    driver: local
  portainer_data:
    driver: local

networks:
  musicnet:
    driver: bridge
